chia 2 h√†m load
sai r l·ªçc theo id ƒëi


export async function loadMoviesFetch () {
  //l·∫•y data ·ªü b·ªô nh·ªõ cachedMovie ra s·ª≠ d·ª•ng (c√≥ th·ªÉ c√≥ or no)
  const cachedMoviesRaw = localStorage.getItem('cachedMovie');
  //l·∫•y data ng√†y th√¥i
  const cachedTime = localStorage.getItem('cachedTime');

  const now = Date.now();
  const oneDay = 1 * 60 * 1000;

  // n·∫øu c√≥ data th√¨ l·∫•y data ƒë√≥ ·ªü trong b·ªô nh·ªõ, n·∫øu ko c√≥ th√¨ t·∫°o [] tr·ªëng
  const cachedMovies = cachedMoviesRaw ? JSON.parse(cachedMoviesRaw) : [];

  //t·∫°o 1 map l∆∞u c√°c gtri [slug, movie] (movie l√† ƒë·∫ßy ƒë·ªß c√°c th√¥ng tin √°)
  //vd [nguoi-hung-yeu-duoi, {slug:'nguoi-hung..', name: 'Ng∆∞·ªùi h√πng...}]
  const cachedMovieMap = new Map(
    cachedMovies.map(movie => [movie.slug, movie])
  );

  const needUpdate = !cachedTime || (now - cachedTime > oneDay);
  if (!needUpdate && cachedMovies.length) {
    console.log(' cachedMovie c√≤n h·∫°n, d√πng l·∫°i');
    return cachedMovies;
  }

  const allCountrySlug = ['han-quoc', 'trung-quoc', 'nhat-ban', 'au-my'];
  //t·∫°o 1 b·∫£n sao c·ªßa cachedMovieMap ƒë·ªÉ update sau n√†y
  const updateMovieMap = new Map(cachedMovieMap);

  for(const slug of allCountrySlug) {
    let page = 1;
    let hasMore = true;
    while(hasMore){
      console.log(`ƒêang fetch ${slug} - page ${page}`);
      const response = await fetch(
        `https://phimapi.com/v1/api/quoc-gia/${slug}?page=${page}`
        
      );
      const movieData = await response.json();
 
      const items = movieData.data.items;
      const params = movieData.data.params;

      for(const item of items){
        //l·∫•y slug t·ª´ c√°i item(phim) l∆∞u v√†o cached ƒë·ªÉ sd
        const cached = cachedMovieMap.get(item.slug)
        // n·∫øu kh item ƒë√≥ trong cachedMovieMap h√¨ s·∫Ω tr·∫£ v·ªÅ undifine v√† s·∫Ω th√™m v√¥
        const isNew = !cached;
        const isUpdated = cached && item.episode_current !== cached.episode_current;

        if (isNew || isUpdated) {
          const newMovie = new Movie(item, params);
          const mergedMovie = cached ? { ...cached, ...newMovie } : newMovie;

          console.log('Cached movie:', cached);
          console.log('New movie:', newMovie);  
          console.log('Merged movie:', mergedMovie);

          updateMovieMap.set(item.slug, mergedMovie);
        } else {
          // Gi·ªØ nguy√™n b·∫£n c≈© ƒë·∫ßy ƒë·ªß (c√≥ extraInfo)
          updateMovieMap.set(item.slug, cached);
        }
      }
      hasMore = page < 3//movieData.data.params.pagination.totalPages;
      page++;
    }
  }
  //upade movie trong map th√†nh movie array
  const updatedMovies = Array.from(updateMovieMap.values());

  console.log('Sample updated movie:', updatedMovies[0]);
console.log('Does it have extraInfo?', updatedMovies[0].content ? 'YES' : 'NO');

  localStorage.setItem('cachedMovie', JSON.stringify(updatedMovies));
  localStorage.setItem('cachedTime', now.toString());

  console.log(`ƒê√£ l∆∞u ${updatedMovies.length} phim (c√≥ c·∫≠p nh·∫≠t n·∫øu c·∫ßn)`);

  return updatedMovies;
}


Test favMovie
/*
export async function testSingleMovie() {
  const movie = fullMovieList.find(m => m.slug === 'nguoi-hung-yeu-duoi');
  
  if (!movie) {
    console.log('‚ùå Kh√¥ng t√¨m th·∫•y phim c√≥ slug ƒë√≥');
    return;
  }

  console.log('üîç ƒêang fetch th√¥ng tin chi ti·∫øt...');
  
  try {
    const detail = await extraMovieFetch(movie); // üëà PH·∫¢I c√≥ await
    
    if (detail) {
      console.log('üé¨ Th√¥ng tin chi ti·∫øt l·∫•y ƒë∆∞·ª£c:', detail);
      console.log('‚úÖ Content:', detail.content);
      console.log('‚úÖ Quality:', detail.quality);
      console.log('‚úÖ Category:', detail.category);
      console.log('‚úÖ T·∫≠p hi·ªán t·∫°i:', detail.episode_current);
    } else {
      console.log('‚ùå Kh√¥ng l·∫•y ƒë∆∞·ª£c th√¥ng tin chi ti·∫øt');
    }
  } catch (error) {
    console.log('‚ùå L·ªói:', error);
  }
}

// Ch·∫°y test
testSingleMovie();

// Test danh s√°ch y√™u th√≠ch
getMovieFav().then(favList => {
  console.log('üìã Danh s√°ch phim y√™u th√≠ch:', favList);
});
*/

//load 100 v√† c·∫≠p nh·∫≠t
export async function loadMoviesFetch() {
  // L·∫•y d·ªØ li·ªáu cache
  const cachedMoviesRaw = localStorage.getItem('cachedMovie');
  const cachedTime = localStorage.getItem('cachedTime');

  const now = Date.now();
  const oneDay = 24 * 60 * 60 * 1000;

  // Parse cache n·∫øu c√≥
  const cachedMovies = cachedMoviesRaw ? JSON.parse(cachedMoviesRaw) : [];

  // T·∫°o Map ƒë·ªÉ tra c·ª©u nhanh theo slug
  const cachedMovieMap = new Map(
    cachedMovies.map(movie => [movie.slug, movie])
  );

  // N·∫øu c√≤n th·ªùi gian cache th√¨ d√πng l·∫°i
  if (cachedMovies.length && cachedTime && (now - cachedTime < oneDay)) {
    console.log("D√πng cachedMovie (c√≤n h·∫°n)");
    return cachedMovies;
  }

  const allCountrySlug = ['han-quoc', 'trung-quoc', 'nhat-ban', 'au-my'];
  const updatedMovieMap = new Map(cachedMovieMap); // b·∫£n sao ƒë·ªÉ c·∫≠p nh·∫≠t

  for (const slug of allCountrySlug) {
    let page = 1;
    let hasMore = true;

    while (hasMore) {
      console.log(`ƒêang fetch ${slug} - page ${page}`);
      const response = await fetch(
        `https://phimapi.com/v1/api/quoc-gia/${slug}?page=${page}`
      );
      const movieData = await response.json();

      const items = movieData.data.items;
      const countrySlug = movieData.data.params;

      for (const item of items) {
        const cached = cachedMovieMap.get(item.slug);

        // N·∫øu ch∆∞a t·ª´ng c√≥ phim n√†y ‚Üí th√™m
        // N·∫øu ƒë√£ c√≥ nh∆∞ng c√≥ s·ªë t·∫≠p m·ªõi h∆°n ‚Üí thay
        if (
          !cached ||
          item.episode_current !== cached.episode_current
        ) {
          const newMovie = new Movie(item, countrySlug);
          updatedMovieMap.set(item.slug, newMovie);
        }
      }

      hasMore = page < 3; // b·∫°n c√≥ th·ªÉ ƒë·ªïi l·∫°i th√†nh movieData.data.params.pagination.totalPages
      page++;
    }
  }

  // Convert Map th√†nh Array ƒë·ªÉ l∆∞u cache
  const updatedMovies = Array.from(updatedMovieMap.values());

  // L∆∞u l·∫°i v√†o localStorage
  localStorage.setItem('cachedMovie', JSON.stringify(updatedMovies));
  localStorage.setItem('cachedTime', now.toString());

  console.log(`ƒê√£ l∆∞u ${updatedMovies.length} phim (c√≥ c·∫≠p nh·∫≠t n·∫øu c·∫ßn)`);

  return updatedMovies;
}




export async function loadMoviesFetch() {
  //l·∫•y d·ªØ li·ªáu t·ª´ b·ªô nh·ªõ ƒë·ªám 'cachedMovie' ƒë√£ t·∫°o t·ª´ setItem ·ªü d∆∞·ªõi
  const cached = localStorage.getItem('cachedMovie');
  //l·∫•y th·ªùi gian ƒë√£ l∆∞u trong b·ªô nh·ªõ ƒë·ªám 'cachedTime' ƒë√£ t·∫°o t·ª´ setItem ·ªü d∆∞·ªõi
  const cachedTime = localStorage.getItem('cachedTime');
  
  const now = Date.now(); // l·∫•y th·ªùi gian hi·ªán t·∫°i t√≠nh b·∫±ng mili gi√¢y
  const oneDay = 24 * 60 * 60 * 1000; // 1 ng√†y t√≠nh b·∫±ng mili gi√¢y
  //n√≠u th·ªùi gian trong cached c√≤n (1day) th√¨ l·∫•y d·ªØ li·ªáu t·ª´ cached
  if(cached && cachedTime && (now - cachedTime < oneDay)){
    return JSON.parse(cached);
  }
  //n·∫øu kh√¥ng c√≤n time th√¨ s·∫Ω l·∫•y data = fetch t·ª´ API
  const allCountrySlug = [
    'han-quoc',
    'trung-quoc',
    'nhat-ban',
    'au-my'
  ];
  /*
  const favMovieSlug = [
    'nguoi-hung-yeu-duoi',
    'nguu-lan-chuc-nu',
    'khi-cuoc-doi-cho-ban-qua-quy',
    'rung-khong-tieng',
    'the-gioi-ma-quai-phan-3'
  ];
  const allMovies = [];

  for(const slug of allCountrySlug){
    let page = 1;
    let hasMore = true;
    while(hasMore){
      console.log(`ƒêang fetch ${slug} - page ${page}`);
      const response = await fetch(
        `https://phimapi.com/v1/api/quoc-gia/${slug}?page=${page}`
      );
      const movieData = await response.json();

      const items = movieData.data.items; //l·∫•y d·ªØ li·ªáu ·ªü items
      const countrySlug = movieData.data.params; //l·∫•y ·ªü params

      const moviePageCurrently = items.map((movieDetail) => {

        return new Movie(movieDetail, countrySlug);
      });
      allMovies.push(...moviePageCurrently);
      hasMore = page < 100//movieData.data.params.pagination.totalPages;
      page++;
      }
  }
  //t·∫°o b·ªô nh·ªõ ƒë·ªám t√™n l√† 'cachedMovie' v√† l∆∞u d·ªØ li·ªáu c·ªßa allMovies v√†o ƒë√≥
  localStorage.setItem('cachedMovie',JSON.stringify(allMovies));
  //t·∫°o b·ªô nh·ªõ ƒë·ªám t√™n l√† 'cachedTime' v√† l∆∞u th·ªùi gian hi·ªán t·∫°i v√†o ƒë√≥
  localStorage.setItem('cachedTime', now.toString());
  console.log('Movies loaded from API');
  return allMovies; 
}




async function fetchAllMoviesFromAPI (){
  const allCountrySlug = [
    'han-quoc',
    'trung-quoc',
    'nhat-ban',
    'my',
    'viet-nam'
  ]
  const allMovies = [];
  for(const slug of allCountrySlug){
  let page = 1;
  let hasMore = true;
  while(hasMore){
    console.log(`üìÑ ƒêang fetch ${slug} - page ${page}`);
    const response = await fetch(
      `https://phimapi.com/v1/api/quoc-gia/${slug}?page=${page}`
    );
    const movieData = await response.json();

    const items = movieData.data.items; //l·∫•y d·ªØ li·ªáu ·ªü items
    const countrySlug = movieData.data.params; //l·∫•y ·ªü params

    const moviePageCurrently = items.map((movieDetail) => {
      return new Movie(movieDetail, countrySlug);
    });
    allMovies.push(...moviePageCurrently);
    hasMore = page < 4//movieData.data.params.pagination.totalPages;
    page++;
    }
  }
  return allMovies;
}

export async function loadMoviesFetch() {
  const cached = localStorage.getItem('cachedMovie');
  const cachedTime = localStorage.getItem('cachedTime');
  const now = Date.now();
  const oneDay = 24 * 60 * 60 * 1000; 
  if(cached && cachedTime && (now - cachedTime < oneDay)){
    return JSON.parse(cached);
  }
  const allMovies = await fetchAllMoviesFromAPI();
  localStorage.setItem('cachedMovie', JSON.stringify(allMovies));
  localStorage.setItem('cachedTime', now.toString());
  console.log('Movies loaded from API');
  return allMovies;
}  
*/